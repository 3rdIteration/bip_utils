# Copyright (c) 2020 Emanuele Bellocchia
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# Imports
import binascii
import unittest
from bip_utils import Bip44, Bip44Coins, Bip44Changes, Bip44DepthError, LitecoinConf


# Results generated with Ian Coleman web page:
# https://iancoleman.io/bip39/
# There are some differences from the website and the specs I found for Litecoin testnet (extended keys prefixes) so,
# in that case, the keys were generated by this library after begin tested for the correct addresses
TEST_VECTOR = \
    [
        # Bitcoin
        {
            "coin"       : Bip44Coins.BITCOIN,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu",
            "wif_master" :  "5HzxC8XHHAtoC5jVvScY8Tr99Ud9MwFdF2pJKYsMTUknJZEurYr",
            "account" :
                {
                    "ex_pub"  : "xpub6BosfCnifzxcFwrSzQiqu2DBVTshkCXacvNsWGYJVVhhawA7d4R5WSWGFNbi8Aw6ZRc1brxMyWMzG3DSSSSoekkudhUd9yLb6qx39T9nMdj",
                    "ex_priv" : "xprv9xpXFhFpqdQK3TmytPBqXtGSwS3DLjojFhTGht8gwAAii8py5X6pxeBnQ6ehJiyJ6nDjWGJfZ95WxByFXVkDxHXrqu53WCRGypk2ttuqncb",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "xpub6ELHKXNimKbxMCytPh7EdC2QXx46T9qLDJWGnTraz1H9kMMFdcduoU69wh9cxP12wDxqAAfbaESWGYt5rREsX1J8iR2TEunvzvddduAPYcY",
                    "ex_priv" : "xprvA1Lvv1qpvx3f8iuRHfaEG45fyvDc3h7Ur5afz5SyRfkAsZ2765KfFfmg6Q9oEJDgf4UdYHphzzJybLykZfznUMKL2KNUU8pLRQgstN5kmFe",
                },
            "addresses" :
                [
                    "1LqBGSKuX5yYUonjxT5qGfpUsXKYYWeabA",
                    "1Ak8PffB2meyfYnbXZR9EGfLfFZVpzJvQP",
                    "1MNF5RSaabFwcbtJirJwKnDytsXXEsVsNb",
                    "1MVGa13XFvvpKGZdX389iU8b3qwtmAyrsJ",
                    "1Gka4JdwhLxRwXaC6oLNH4YuEogeeSwqW7",
                ],
        },
        # Litecoin
        {
            "coin"          : Bip44Coins.LITECOIN,
            "seed"          : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"     :  "xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu",
            "ex_master_alt" :  "Ltpv71G8qDifUiNetExQFUsQdYezsBDUaB814BhGZsphfZBrT3zqfeXTed3NqdFEoARcM1uJVNKbqmXwJscuMY753LZUtc36GiKqV5anTrnqWfr",
            "wif_master"    :  "6uJgfG4pBbMffTdMSGQVurdK6xBcZjhf1iDU2jtPAw5PzRdhx9m",
            "account" :
                {
                    "ex_pub"      : "xpub6BnJJjq783EdyBeQPA9P9ao9DTS3fUqyKG5NJDcrCiwwxEkesGoHN94LZRGE7rz1jgcvmmp8j55BNx573KFq1WBwKiemzkdfNKffKx6Mvku",
                    "ex_priv"     : "xprv9xnwuEJDHfgLkhZwH8cNnSrQfRbZG287x39mVqDEePQy5SRWKjV2pLjri8x93UfBSQdsGPeJFi8qXKexJUNj5eU3gEKfHUzo6EmuK6CSgEq",
                    "ex_pub_alt"  : "Ltub2YDQmP391UYeDYvLye9P1SuNJFkcRGN7SYHM8JMxaDnegcPTXHJ2BnYmvHnFnGPGKu2WMuCga6iZV3SDxDMGrRyMcrYEfSPhrpS1EPkC43E",
                    "ex_priv_alt" : "Ltpv7735AbcbmL1gbgDWj2ezvs59rh4RM1oTN2BKTKbfe3146FCPCNFbBBSWfuV9vCJNMXD9LuHpQnqVWpn2hbMhikqPdoGqbS3ptdPoNWEvvgR",
                },
            "chain_ext" :
                {
                    "ex_pub"      : "xpub6F8vdBLe2hjJ6hn9Mh7gH4dGQrUvWy8TSoNWPF1Kz1sbcmzdDQDTRZKoWGdxDyF4K2bDnKYmzb3oLWiMGnghLxwv3qywBcDJy2PLuX86BML",
                    "ex_priv"     : "xprvA29aDfokCLAztDhgFfafuvgXrpeS7WQc5aSuarbiRgLcjyfUfruCsm1KezybgSj2V3g4rxmfJ3bKyLxtmRk8rLtUgLu8Ta8j3fdLG5n9RSV",
                    "ex_pub_alt"  : "Ltub2ba35pYfv93JM545xB7g8vjVVeoVGkeba5aVDKkSMWiJM9dRsQiCFCpEs99ytNeJuEzoNSwKqchBSc5UBgn9BtjLLysPrHyMTX9gp7D46dD",
                    "ex_priv_alt" : "Ltpv7APhV388fzWLjCMFhZdJ4LuH467JCW5wVZUTYLz9RKvhknSMYVfmEbhycmWcZANDQAFLwURBT8Hyxr5yAYj7VTFpdurJmXBkr4FEKVQPVMv",
                },
            "addresses" :
                [
                    "LUWPbpM43E2p7ZSh8cyTBEkvpHmr3cB8Ez",
                    "Ldatw8ZjgMGNUo5HMN6RgCrjmh7q494Si3",
                    "LX4YojYdeBk3TtUcryCcgAqYxjicKfK7AD",
                    "LgbbqoBcNc8voAvrrk3ZyqCU3Y4H24aauc",
                    "LiNDwbwBhX9djY7tb3gWvrXjuWQNerLjnP",
                ],
        },
        # Dogecoin
        {
            "coin"       : Bip44Coins.DOGECOIN,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "dgpv51eADS3spNJh98bWAfYnAW8K1gMy86HKmH1dpyT8kLsUKBqssT3jsLLFWyK4zbruL51UjejFDzrFzBcwjjA57rSv6D2978QigKG4xbCfJV6",
            "wif_master" :  "6JKHV5zEqwBbEhAf7qEWk5qNcu6gs4XtrCwXe3WFH8xR7BcSCbr",
            "account" :
                {
                    "ex_pub"  : "dgub8rUhDtD3YFGZTUphBfpBbzvFxSMKQXYLzg87Me2ta78r2SdVLmypBUkkxrrn9RTnchsyiJSkHZyLWxD13ibBiXtuFWktBoDaGaZjQUBLNLs",
                    "ex_priv" : "dgpv57bftCH9z6cEAdAY9SCDV9NfVsygaQWdi5LuCXdumz5qUPWnw1S3YBM7PdHXMvA8oSGS6Pbes1xEHMd5Zi2qHVK45y5FKKXzBXsZcTtYmX5",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "dgub8toY7HgJc8TXA6fsb32FeTVrnqYMsBghLkw1Bu1XeDVJRun2YmnQTJUcNFPfcNs6Kf14DJo1gfKMFucNbdwQweXU1qknNHmTQfLKQLQTaS1",
                    "ex_priv" : "dgpv59vWmbkR3yoBsF1iYoQHXbxGLHAj34ez4A9o2ncYr6SHsrfL91Edp14xo29tx1a3cZA5M3o3fbr6g3ZViHrHkgSVE3WNJ23jgESJtkkL7hs",
                },
            "addresses" :
                [
                    "DBus3bamQjgJULBJtYXpEzDWQRwF5iwxgC",
                    "DAcDAtJRztxBHyA6D6h8du1HguyTR43Mas",
                    "D8K3KyDQ9FXeC3ADCuWW7cnWC7RvjHjV8H",
                    "D6RRdXkUbb3pazkYGXAXwbJY5iC8Tyqwzh",
                    "DTdrvUHbk5oMyi62tM7LqrjAcXfqB7eaad",
                ],
        },
        # Dash
        {
            "coin"       : Bip44Coins.DASH,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu",
            "wif_master" :  "7qjXbkdi3WJ1SRu6pVnUcqQzk9RimTJB3cCUrw9V1HGFoqaB948",
            "account" :
                {
                    "ex_pub"  : "xpub6CYEjsU6zPM3sADS2ubu2aZeGxCm3C5KabkCpo4rkNbXGAH9M7rRUJ4E5CKiyUddmRzrSCopPzisTBrXkfCD4o577XKM9mzyZtP1Xdbizyk",
                    "ex_priv" : "xprv9yYtLMwDA1nkeg8xvt4tfScuivNGdjMUDNpc2QfFC34YPMwzoaYAvVjkDvJ1APVeGMJnbJ6gPZMq4G7UfExoP5PpAS3UCF9utjeWa5eXq23",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "xpub6FKQUVtZJMKhDeyeLuVTXT9UzGYy1hLn6rBSEdDbuCbpRsTytXimeU1kS2ai17SuC29cx43Q7RtmL9SGG22PqMdb36EGWKbUS3meW9sWdEm",
                    "ex_priv" : "xprvA2L44zMfTymQ1AuBEsxTAKCkSEiUcEcvjdFqSEozLs4qZ58qLzQX6fhGanTTqMrwQevXCq3NUSw4xncudnC4s6htZkGBzJWMyG7LFgy4Kvs",
                },
            "addresses" :
                [
                    "XoJA8qE3N2Y3jMLEtZ3vcN42qseZ8LvFf5",
                    "XbctnEsgWTn5j1co3emZynemxSFPqkLRKZ",
                    "XdD2biTJ3saZtcR6ravwJ9bvmkvmDq49Xg",
                    "XkBrNhE8srfb8BbeTRSU4dxWsjjedra4Xn",
                    "Xe8n8PZNgngjbMCFEA9unH26TmEWPPjm6a",
                ],
        },
        # Ethereum
        {
            "coin"       : Bip44Coins.ETHEREUM,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu",
            "wif_master" :  "",
            "account" :
                {
                    "ex_pub"  : "xpub6DCoCpSuQZB2jawqnGMEPS63ePKWkwWPH4TU45Q7LPXWuNd8TMtVxRrgjtEshuqpK3mdhaWHPFsBngh5GFZaM6si3yZdUsT8ddYM3PwnATt",
                    "ex_priv" : "xprv9zDSoJv1aBcjX6sNgEpE2J9K6MV2MUnXuqXsFgzVn3zY2aHyupaFQdYCtdCbNMkvcTdx9FeN49sgXw6mjrhrFLRSzJVnRYPfSCCgjeg4GxY",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "xpub6EF8jXqFeFEW5bwMU7RpQtHkzE4KJxcqJtvkCjJumzW8CPpacXkb92ek4WzLQXjL93HycJwTPUAcuNxCqFPKKU5m5Z2Vq4nCyh5CyPeBFFr",
                    "ex_priv" : "xprvA1FnL2JMosgCs7rtN5tp3kM2SCDpuVtywg19QLuJDey9KbVS4zSLbELGDFdugxESvYxCU1wEJhDmMXvHKwmpCLd8QSoUJCHmVHCGvpFPxiw",
                },
            "addresses" :
                [
                    "0x9858EfFD232B4033E47d90003D41EC34EcaEda94",
                    "0x6Fac4D18c912343BF86fa7049364Dd4E424Ab9C0",
                    "0xb6716976A3ebe8D39aCEB04372f22Ff8e6802D7A",
                    "0xF3f50213C1d2e255e4B2bAD430F8A38EEF8D718E",
                    "0x51cA8ff9f1C0a99f88E86B8112eA3237F55374cA",
                ],
        },
        # Ripple
        {
            "coin"       : Bip44Coins.RIPPLE,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "xprv9s21ZrQH143K3GJpoapnV8SFfukcVBSfeCficPSGfubmSFDxo1kuHnLisriDvSnRRuL2Qrg5ggqHKNVpxR86QEC8w35uxmGoggxtQTPvfUu",
            "wif_master" :  "",
            "account" :
                {
                    "ex_pub"  : "xpub6CFKyZTfzj3cyeRLUDKwQQ5s1tqTTdVgywKMVkrB2i1taGFbhazkxDzWVsfBHZpv7rg6qpDBGYR5oA8iazEfa44CdQkkknPFHJ7YCzncCS9",
                    "ex_priv" : "xprv9yFya3vnAMVKmALsNBnw3G98Trzy4AmqciPkhNSZUNUuhTvTA3gWQRg2ecJFS3PDLsfYFgwDW1UukaapjTDUENfiwg22ryd4mWiph8Faw3p",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "xpub6F119CdfnfeSVeXbJG7h88TG6SjjtvFYBup7HszDLmaCCDgbZ4n1tP6J6R8PikUqtiqgdJSXXB79V3SxVA4LkygGDkesJ4pW5bq3dQU7cbm",
                    "ex_priv" : "xprvA21ejh6mxJ69HAT8CEagkzWXYQuFVTXgpgtWVVabnS3DKRMT1XTmLampF9DgbLwYuqZAZCHMokjt2rCCMnScQLZWmHdnS11XfySXtiA5ygo",
                },
            "addresses" :
                [
                    "rHsMGQEkVNJmpGWs8XUBoTBiAAbwxZN5v3",
                    "r3AgF9mMBFtaLhKcg96weMhbbEFLZ3mx17",
                    "r4Sh61HP7nxB6mQxXSSeN2DCkG3sTrzb2c",
                    "rwT7dzQuZim2SdY1jGFGwpre4bh6xpr31a",
                    "rPdQVkTzpZ7ToRqTRBRrUKPoCTty7n3UVj",
                ],
        },
        # Bitcoin test net
        {
            "coin"       : Bip44Coins.BITCOIN_TESTNET,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "tprv8ZgxMBicQKsPe5YMU9gHen4Ez3ApihUfykaqUorj9t6FDqy3nP6eoXiAo2ssvpAjoLroQxHqr3R5nE3a5dU3DHTjTgJDd7zrbniJr6nrCzd",
            "wif_master" :  "91mamsLpsPxwA9EnYnWT14Q6o8yrX6npaygFQBDroDVq5dZG3q3",
            "account" :
                {
                    "ex_pub"  : "tpubDC5FSnBiZDMmhiuCmWAYsLwgLYrrT9rAqvTySfuCCrgsWz8wxMXUS9Tb9iVMvcRbvFcAHGkMD5Kx8koh4GquNGNTfohfk7pgjhaPCdXpoba",
                    "ex_priv" : "tprv8fPDJN9UQqg6pFsQsrVxTwHZmXLvHpfGGcsCA9rtnatUgVtBKxhtFeqiyaYKSWydunKpjhvgJf6PwTwgirwuCbFq8YKgpQiaVJf3JCrNmkR",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "tpubDEQBfiy13hMZzGT4NWqNnaSWwVqYQ58kuu2pDYjkrf8F6DLKAprm8c65Pyh7PrzodXHtJuEXFu5yf6JbvYaL8rz7v28zapwbuzZzr7z4UvR",
                    "ex_priv" : "tprv8hi9XJvkuKfu6oRGUsAnPAnQNUKcEjwrLbS2w2hTSPKrFj5YYS3Ax7UDDrZZHd4PSnPLW5whNxAXTW5bBrSNiSD1LUeg9n4j5sdGRJsZZwP",
                },
            "addresses" :
                [
                    "mkpZhYtJu2r87Js3pDiWJDmPte2NRZ8bJV",
                    "mzpbWabUQm1w8ijuJnAof5eiSTep27deVH",
                    "mnTkxhNkgx7TsZrEdRcPti564yQTzynGJp",
                    "mpW3iVi2Td1vqDK8Nfie29ddZXf9spmZkX",
                    "n2BMo5arHDyAK2CM8c56eoEd18uEkKnRLC",
                ],
        },
        # Litecoin test net
        {
            "coin"       : Bip44Coins.LITECOIN_TESTNET,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "ttpv96BtqegdxXceQk8r9KuoG5yiMACLxANu9hh98NpMwpzcCa8XfrJ7uwnRBMzsE5n9y2exs7VQBBdHNiJ66BrDUWE28WoexgbFVRkRc2abBR9",
            "wif_master" :  "91mamsLpsPxwA9EnYnWT14Q6o8yrX6npaygFQBDroDVq5dZG3q3",
            "account" :
                {
                    "ex_pub"  : "ttub4d4VPcY3DBxKCoAjoeDr9q3FaD4dbY89X65XUhapWiaSFbEjYLwnNg2EcHgEVSEALaEVdZnprREdcWMPJxqFkvN89FcPRFBueauxVCvFpUt",
                    "ex_priv" : "ttpv9Bt9nq7Vy3RMavTuZ2jU5FD38eNSXHZVSZyVoipXaXnqfE3fDRuMN4uyMufJjnb45U7zBs8EdoJbXxCCjRL5Tp27oNq89yJyNwhA48Rqv9P",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "ttub4fPRcZKKhfx7VLibQetg54Y6BA3KYTQjb4eNFaRPAX1oppS6kpH558eirYsyxgoN3qvDfCGzuEzf8qrJBEZgXWynPU3iFxJppsua8eJixXb",
                    "ex_priv" : "ttpv9ED61mtnTXR9sU1mA3QHzUhsjbM8UCr5WYYLabf6ELEDETF2RuEe4XYTcBgYatfocUBVxF9Fi6Nj3zL7CQpYyeyJ1KA7VLf7yWfPB8Cjufb",
                },
            "addresses" :
                [
                    "mkpZhYtJu2r87Js3pDiWJDmPte2NRZ8bJV",
                    "mzpbWabUQm1w8ijuJnAof5eiSTep27deVH",
                    "mnTkxhNkgx7TsZrEdRcPti564yQTzynGJp",
                    "mpW3iVi2Td1vqDK8Nfie29ddZXf9spmZkX",
                    "n2BMo5arHDyAK2CM8c56eoEd18uEkKnRLC",
                ],
        },
        # Dogecoin test net
        {
            "coin"       : Bip44Coins.DOGECOIN_TESTNET,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "tgpv1aRS3XcGkbKXDbWwtRDZFYqUaCsEVXgkHt9m5mEjaWGGA18gaU1qZatwWCmjT66o2CmSNJmXkAvG29sYFXrz11WEaLwVrckr5LMkUrVeQmp",
            "wif_master" :  "95f58LEtaFKPRnQCMwkSuhbedNDHpWUaAFpTtUbenXWc4oSGq5N",
            "account" :
                {
                    "ex_pub"  : "tgub5QziLPy2KFnZgdWALMfCBZcPpFQxtmu3sMDKvDdt1L7WAiAWXpAqf1S9FzNEEa7ipDM6kEy4o9mrVGshjxMKMoq383HELMHguMNGgRryJwt",
                    "ex_priv" : "tgpv1g7gzi38m78EPmr1J83E4i4oMh3L4esLakS7m7EuDD4Vcf3p83d51i2VgkSAxnuh8eETh4QNCnbaBPmetmLqzKJLFCxy3uUZxrJUw2K7GUp",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "tgub5TKeZLkJojnMyB41wNL26o7ERCPeqhBdwKnAh6USf8YsjwMskHW8MU4dWFZyhpgvXV2pmsTEqyXt1cNccE5k8QShNFiZB4Qc5eMtKv6s9mt",
                    "ex_priv" : "tgpv1iSdDepRFb82gKPru8i3ywZdxe221a9veizxXz5Ts1VsBtFBLWxMiAeyw2TQotzSfeHyTSRPH5fhhRuZMkqKWAFWT9HxPGpiZRGi3zY83Mf",
                },
            "addresses" :
                [
                    "nZVmfmUtKPmskB9Ds4P9GUJy9eYFqPKHqH",
                    "noVoUoC3q7wgmb25McqSdLCHhUAhSREkT9",
                    "nb8xvuyL7K3DWS8QgGH2rxcfKyvMQ1wiYe",
                    "ndBFgiJbsywgU5bJRWPGzQBCpYB3M1DZCU",
                    "nprZmJBRhatuwtUXBSjjd3nCG9R8DDm3y3",
                ],
        },
        # Dash test net
        {
            "coin"       : Bip44Coins.DASH_TESTNET,
            "seed"       : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"  :  "tprv8ZgxMBicQKsPe5YMU9gHen4Ez3ApihUfykaqUorj9t6FDqy3nP6eoXiAo2ssvpAjoLroQxHqr3R5nE3a5dU3DHTjTgJDd7zrbniJr6nrCzd",
            "wif_master" :  "91mamsLpsPxwA9EnYnWT14Q6o8yrX6npaygFQBDroDVq5dZG3q3",
            "account" :
                {
                    "ex_pub"  : "tpubDC5FSnBiZDMmhiuCmWAYsLwgLYrrT9rAqvTySfuCCrgsWz8wxMXUS9Tb9iVMvcRbvFcAHGkMD5Kx8koh4GquNGNTfohfk7pgjhaPCdXpoba",
                    "ex_priv" : "tprv8fPDJN9UQqg6pFsQsrVxTwHZmXLvHpfGGcsCA9rtnatUgVtBKxhtFeqiyaYKSWydunKpjhvgJf6PwTwgirwuCbFq8YKgpQiaVJf3JCrNmkR",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "tpubDEQBfiy13hMZzGT4NWqNnaSWwVqYQ58kuu2pDYjkrf8F6DLKAprm8c65Pyh7PrzodXHtJuEXFu5yf6JbvYaL8rz7v28zapwbuzZzr7z4UvR",
                    "ex_priv" : "tprv8hi9XJvkuKfu6oRGUsAnPAnQNUKcEjwrLbS2w2hTSPKrFj5YYS3Ax7UDDrZZHd4PSnPLW5whNxAXTW5bBrSNiSD1LUeg9n4j5sdGRJsZZwP",
                },
            "addresses" :
                [
                    "yRd4FhXfVGHXpsuZXPNkMrfD9GVj46pnjt",
                    "yfd64jEpzzTLrHnR1wq3iiYXh68AiU8mcw",
                    "yTGFWr27HBYsb8tkLbGdxLxuKbspamdbnG",
                    "yVJYGeMP3rTLYnMe5qNt5nXSpA8WUTcz49",
                    "ygyrMEECsTQa2bErqmjLiS8SFmNbQ4ynNF",
                ],
        },
    ]


#
# Tests
#
class Bip44Tests(unittest.TestCase):
    # Run all tests in test vector using FromSeed for construction
    def test_vector_from_seed(self):
        for test in TEST_VECTOR:
            # Create from seed
            bip_obj_ctx = Bip44.FromSeed(binascii.unhexlify(test["seed"]), test["coin"])
            # Test master key
            self.assertEqual(test["ex_master"] , bip_obj_ctx.PrivateKey())
            self.assertEqual(test["wif_master"], bip_obj_ctx.WalletImportFormat())

            # Derive account
            bip_obj_ctx = bip_obj_ctx.Purpose().Coin().Account(0)
            # Test account keys
            self.assertEqual(test["account"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["account"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Derive external chain
            bip_obj_ctx = bip_obj_ctx.Change(Bip44Changes.CHAIN_EXT)
            # Test external chain keys
            self.assertEqual(test["chain_ext"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["chain_ext"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Test external chain addresses
            for i in range(len(test["addresses"])):
                self.assertEqual(test["addresses"][i], bip_obj_ctx.AddressIndex(i).Address())

            # Only for Litecoin: test extended keys with alternate versions
            if test["coin"] == Bip44Coins.LITECOIN:
                # Set flag
                LitecoinConf.EX_KEY_ALT = True
                # Create from seed
                bip_obj_ctx = Bip44.FromSeed(binascii.unhexlify(test["seed"]), test["coin"])
                # Test master key
                self.assertEqual(test["ex_master_alt"], bip_obj_ctx.PrivateKey())
                # Derive account
                bip_obj_ctx = bip_obj_ctx.Purpose().Coin().Account(0)
                # Test account keys
                self.assertEqual(test["account"]["ex_pub_alt"] , bip_obj_ctx.PublicKey())
                self.assertEqual(test["account"]["ex_priv_alt"], bip_obj_ctx.PrivateKey())

                # Derive external chain
                bip_obj_ctx = bip_obj_ctx.Change(Bip44Changes.CHAIN_EXT)
                # Test external chain keys
                self.assertEqual(test["chain_ext"]["ex_pub_alt"] , bip_obj_ctx.PublicKey())
                self.assertEqual(test["chain_ext"]["ex_priv_alt"], bip_obj_ctx.PrivateKey())
                # Reset flag
                LitecoinConf.EX_KEY_ALT = False


    # Run all tests in test vector using FromExtendedKey for construction
    def test_vector_from_exkey(self):
        for test in TEST_VECTOR:
            # Create from master key
            bip_obj_ctx = Bip44.FromExtendedKey(test["ex_master"], test["coin"])
            # Test master key
            self.assertTrue(bip_obj_ctx.IsMasterLevel())
            self.assertEqual(test["ex_master"], bip_obj_ctx.PrivateKey())

            # Create from account key
            bip_obj_ctx = Bip44.FromExtendedKey(test["account"]["ex_priv"], test["coin"])
            # Test account keys
            self.assertTrue(bip_obj_ctx.IsAccountLevel())
            self.assertEqual(test["account"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["account"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Create from change key
            bip_obj_ctx = Bip44.FromExtendedKey(test["chain_ext"]["ex_priv"], test["coin"])
            # Test external change keys
            self.assertTrue(bip_obj_ctx.IsChangeLevel())
            self.assertEqual(test["chain_ext"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["chain_ext"]["ex_priv"], bip_obj_ctx.PrivateKey())


    # Test wrong path derivations
    def test_wrong_derivations(self):
        seed_bytes = b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4"

        # Create all the derivations
        bip_obj_mst    = Bip44.FromSeed(binascii.unhexlify(seed_bytes), Bip44Coins.BITCOIN)
        bip_obj_prp    = bip_obj_mst.Purpose()
        bip_obj_coin   = bip_obj_prp.Coin()
        bip_obj_acc    = bip_obj_coin.Account(0)
        bip_obj_change = bip_obj_acc.Change(Bip44Changes.CHAIN_EXT)
        bip_obj_addr   = bip_obj_change.AddressIndex(0)

        # Wrong derivation from master
        self.assertRaises(Bip44DepthError, bip_obj_mst.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_mst.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_mst.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_mst.AddressIndex, 0)
        # Wrong derivation from purpose
        self.assertRaises(Bip44DepthError, bip_obj_prp.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_prp.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_prp.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_prp.AddressIndex, 0)
        # Wrong derivation from coin
        self.assertRaises(Bip44DepthError, bip_obj_coin.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_coin.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_coin.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_coin.AddressIndex, 0)
        # Wrong derivation from account
        self.assertRaises(Bip44DepthError, bip_obj_acc.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_acc.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_acc.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_acc.AddressIndex, 0)
        # Wrong derivation from chain
        self.assertRaises(Bip44DepthError, bip_obj_change.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_change.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_change.Account, 0)
        self.assertRaises(Bip44DepthError, bip_obj_change.Change , Bip44Changes.CHAIN_EXT)
        # Wrong derivation from address index
        self.assertRaises(Bip44DepthError, bip_obj_addr.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_addr.AddressIndex, 0)


# Run test if executed
if __name__ == "__main__":
    unittest.main()
