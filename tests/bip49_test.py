# Copyright (c) 2020 Emanuele Bellocchia
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


# Imports
import binascii
import unittest
from bip_utils import Bip49, Bip44Coins, Bip44Changes, Bip44DepthError, LitecoinConf


# Some seeds randomly taken from Ian Coleman web page
# https://iancoleman.io/bip39/
# For Litecoin, the standard extended keys were generated by this library after begin tested with the alternated ones,
# because the website only allows alternate keys for BIP49
# There are some differences from the website and the specs I found for Litecoin testnet (extended keys prefixes) so,
# in that case, the keys were generated by this library after begin tested for the correct addresses
TEST_VECTOR = \
    [
        {
            "coin"      : Bip44Coins.BITCOIN,
            "seed"      : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master" :  "yprvABrGsX5C9jantZVwdwcQhDXkqsu4RoSAZKBwPnLA3uyeVM3C3fvTuqzru4fovMSLqYSqALGe9MBqCf7Pg7Y7CTsjoNnLYg6HxR2Xo44NX7E",
            "account" :
                {
                    "ex_pub"  : "ypub6Ww3ibxVfGzLrAH1PNcjyAWenMTbbAosGNB6VvmSEgytSER9azLDWCxoJwW7Ke7icmizBMXrzBx9979FfaHxHcrArf3zbeJJJUZPf663zsP",
                    "ex_priv" : "yprvAHwhK6RbpuS3dgCYHM5jc2ZvEKd7Bi61u9FVhYMpgMSuZS613T1xxQeKTffhrHY79hZ5PsskBjcc6C2V7DrnsMsNaGDaWev3GLRQRgV7hxF",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "ypub6Ynvx7RLNYgWzFGM8aeU43hFNjTh7u5Grrup7Ryu2nKZ1Y8FWKaJZXiUrkJSnMmGVNBoVH1DNDtQ32tR4YFDRSpSUXjjvsiMnCvoPHVWXJP",
                    "ex_priv" : "yprvAKoaYbtSYB8DmmBt2Z7TgukWphdCiSMRVdzDK3aHUSna8jo6xnG41jQ11ToPk4SQnE5sau6CYK4od9fyz53mK7huW4JskyMMEmixACuyhhr",
                },
            "addresses" :
                [
                    "37VucYSaXLCAsxYyAPfbSi9eh4iEcbShgf",
                    "3LtMnn87fqUeHBUG414p9CWwnoV6E2pNKS",
                    "3B4cvWGR8X6Xs8nvTxVUoMJV77E4f7oaia",
                    "38CahkVftQneLonbWtfWxiiaT2fdnzsEAN",
                    "37mbeJptxfQC6SNNLJ9a8efCY4BwBh5Kak",
                ],
        },
        {
            "coin"          : Bip44Coins.LITECOIN,
            "seed"          : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master"     :  "yprvABrGsX5C9jantZVwdwcQhDXkqsu4RoSAZKBwPnLA3uyeVM3C3fvTuqzru4fovMSLqYSqALGe9MBqCf7Pg7Y7CTsjoNnLYg6HxR2Xo44NX7E",
            "ex_master_alt" :  "Mtpv7L6Q8tPadPv8jY9X5qf2qdkW39MvWo7VyJDVMGib3ZZjW9p4vJh2GghWrqCpo55Xkf27EqvAJRtVCAEU5EX5qaF5kwjWrd9KkoeRrSjowo7",
            "account" :
                {
                    "ex_pub"      : "ypub6WZ2nNciqS7sCCFCH64AswfvBu4pLXTdDQcvTkrSFyEbashNb6vEJwXTCB7axKdR4TSbNYTqnU7S6sYPs9afBYqTytiTdjzmcDVRuYcrtso",
                    "ex_priv"     : "yprvAHZgNs5q14ZZyiAjB4XAWojBdsEKw4jmrBhKfNSphdhci5NE3Zbym9CyLvKLFLNSSV99Pty82vKR6bQ5tAD9nWdqwDETVon86NdDftk4Qra",
                    "ex_pub_alt"  : "Mtub2rz9F1pkisRsSZX8sa4Ajon9GhPP6JymLgpuHqbYdU5JKFLBF7Qy8b1tZ3dccj2fefrAxfrPdVkpCxuWn3g72UctH2bvJRkp6iFmp8aLeRZ",
                    "ex_priv_alt" : "Mtpv7RooeEQDUitupgpJcxZnfDwvq8hC24R7GAiscrqFhHHhit96vCNY7yudJgrM841dMbiRUQceC12566XAHHC8Rd1BtnBdokq9tmF7jLLvUdh",
                },
            "chain_ext" :
                {
                    "ex_pub"      : "ypub6ZaxXJpR4G9iauzhwLi2gV4JxjLqjEHk4XWqK76M8V1LhNZYGj7LiyT7VF8U9wtAvGjnfe5LfEkPKxE3i4M76vtoW38KRU4VKBoiABHGuWt",
                    "ex_priv"     : "yprvALbc7oHXDtbRNRvEqKB2KM7aQhWMKmZthJbEWigja9UMpaEPjBo6BB8ddyCopnFeun5DbkMyd2QkNo6YAPNxRFBJvwbTi2gR3Qy4wiu5vaz",
                    "ex_pub_alt"  : "Mtub2v24yx2SwhTiqHGeXpi2YMAY3XfQV1otBoip9BqTVyr3RkCLvjc5YcwYr7eVpMHRWV9NFmTtWGPmS3bAcxSYwrgDoB1n69pXoga44kARLke",
                    "ex_priv_alt" : "Mtpv7UqjPAbuhYvmDQZpHDDeTmLKbxyDQmFE7HcnUD5AZo4SqP1GbpZeY1qHbjjphVtqpteVgG1Vn77QNJDcZWMw4MYetWYe1yjSqoay1B25d5b",
                },
            "addresses_depr" :
                [
                    "31jkZShyVAMkVz5cQpu4qp73DrAXtFP3rZ",
                    "32pqrhqZauSgZoFj9wK7pQKg5AHXYYvYCf",
                    "3CT62pXvCKF23eRgXQHXxoywFHf2ZGFgLd",
                    "36ELz7iJTw3wuMG9zrATo3Bk7CrXeMXBig",
                    "3MDXS6KsscyBM3DKQxzUfSFXpQJtdJT8na",
                ],
            "addresses" :
                [
                    "M7wtsL7wSHDBJVMWWhtQfTMSYYkyooAAXM",
                    "M92zAbFXY2J7NJXdFpJTe3a5PrsyZQhKZK",
                    "MJfELhwt9S6Sr9hadHGsnTELZzFUVjMrFc",
                    "MCSVJ18GR3uNhrY46j9ocgS9RuSygeGvC5",
                    "MTRfjyjqpjpc9YVDWqypV5Vw96uLZcUajY",
                ],
        },
        {
            "coin"      : Bip44Coins.DASH,
            "seed"      : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master" :  "yprvABrGsX5C9jantZVwdwcQhDXkqsu4RoSAZKBwPnLA3uyeVM3C3fvTuqzru4fovMSLqYSqALGe9MBqCf7Pg7Y7CTsjoNnLYg6HxR2Xo44NX7E",
            "account" :
                {
                    "ex_pub"  : "ypub6XfMrvptRS5DPon5Ncq6w9AKZRde7w4fPxMCmBioQFUZ8wJNY5gQy3KfG8wL6L111jDBVA4opQfq9J82uCGpaSrcmxKkwoZuRXpS1HdgjP8",
                    "ex_priv" : "yprvAJg1TRHzb4WvBKhcGbJ6a1Db1Po9iULp2jRbxoKBquwaG8yDzYNARF1BQpkNqZHNUc5b3tT1Cgy7pA7L9SPH4UZrdF4cKvmHGjzWWP9VjZ4",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "ypub6ZQqzbH8PeLbg36yPKPeVquiSiZJZtRX2cab4HwvrUhwAC8FYJLznZoedn6jg71geRfVwEZvJ2agVgGjaMoSH5nMg83ZtnxHxcNAFJeg5MB",
                    "ex_priv" : "yprvALRVb5kEZGnJTZ2WHHre8hxytgipARhffPezFuYKJ9AxHPo6zm2kEmVAnWu76MeK7LXZ54wKP1cFaXB4XzdcE79QfHoGB1n7oixVVxpfn2w",
                },
            "addresses" :
                [
                    "7bG9yjGpzvKvffhHkCkDRsLLZ5iJxyDcX7",
                    "7WeB1MquavUF2AdQwiu5kiHNtSMA8RWKka",
                    "7cmSUivNKPsH6J6MmsMfYJrQS2p3GZzSm7",
                    "7mG6G6PEiS5qFxFXCvGw8E56tVizUP6zyW",
                    "7iWwAjC3qd3uBPkkAZsLjcjtQNP8maaBfB",
                ],
        },
        {
            "coin"      : Bip44Coins.BITCOIN_TESTNET,
            "seed"      : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master" :  "uprv8tXDerPXZ1QsVNjUJWTurs9kA1KGfKUAts74GCkcXtU8GwnH33GDRbNJpEqTvipfCyycARtQJhmdfWf8oKt41X9LL1zeD2pLsWmxEk3VAwd",
            "account" :
                {
                    "ex_pub"  : "upub5EFU65HtV5TeiSHmZZm7FUffBGy8UKeqp7vw43jYbvZPpoVsgU93oac7Wk3u6moKegAEWtGNF8DehrnHtv21XXEMYRUocHqguyjknFHYfgY",
                    "ex_priv" : "uprv91G7gZkzehuMVxDJTYE6tLivdF8e4rvzSu1LFfKw3b2Qx1Aj8vpoFnHdfUZ3hmi9jsvPifmZ24RTN2KhwB8BfMLTVqaBReibyaFFcTP1s9n",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "upub5F7X3ZAt1HsUyFLTFU9vhKeGULy77aDoJFhscvGBV91tm2mzQ5egFGpeP4nGskwERwbU48g14qREqXJ388X8XBiaLm7PWwk3S45Fe3WAvdK",
                    "ex_priv" : "uprv928Ae3dzAvKBkmFz9ScvLBhXvK8ci7Vww2nGpXrZvoUutESqrYLRhUWAXpK5acXh517npKuCpJ7NXaoWnLs1dLB9w3MHe3KNUm7hPENqMzt",
                },
            "addresses" :
                [
                    "2Mww8dCYPUpKHofjgcXcBCEGmniw9CoaiD2",
                    "2N55m54k8vr95ggehfUcNkdbUuQvaqG2GxK",
                    "2N9LKph9TKtv1WLDfaUJp4D8EKwsyASYnGX",
                    "2MyVXDzGJgATSdkhKHWvStpBoGEZb1fwjha",
                    "2MuKeQzUHhUQWUZgx5AuNWoQ7YWx6vsXxrv",
                ],
        },
        {
            "coin"      : Bip44Coins.LITECOIN_TESTNET,
            "seed"      : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master" :  "ttpv96BtqegdxXceQk8r9KuoG5yiMACLxANu9hh98NpMwpzcCa8XfrJ7uwnRBMzsE5n9y2exs7VQBBdHNiJ66BrDUWE28WoexgbFVRkRc2abBR9",
            "account" :
                {
                    "ex_pub"  : "ttub4e78U9UeJNe63CKWYyANN9P7FxhuRxQNnFhSnp9yPiLVTzi46eu8kjp1GyCKBpWt5pftjBcPoZ22XefHhZ6eCKj7gVE6igKcDzrfzcGAGJ8",
                    "ex_priv" : "ttpv9CvnsN474E78RKcgJMfzHZYtpQ1iMhqihjbR7qPgTXYtsdWymjrhk8hk2biT18feVvbkRMNYtYH75DxfE36M8LR9JLPCBJVWbVDiynpG7JX",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "ttub4eyBRdMdpb3vJ1NCEsZBozMiZ2ht5CyLGPUPMggcGvnzQDzApGQmCS2Y9Hvgxoens678GS22dGDcfKB2vmbmBzDLUprgdLDxk5CArPc8iLo",
                    "ex_priv" : "ttpv9Dnqpqw6aSWxg8fMzG4ojQXW7U1gzxQgBsNMghvKLk1Poro6VMNLBpvGtwUUsyVBq3o9X1WCgmy2EnSU5CqB6KFqjYAJPh6H6g6AkX8gtNN",
                },
            "addresses_depr" :
                [
                    "2Mww8dCYPUpKHofjgcXcBCEGmniw9CoaiD2",
                    "2N55m54k8vr95ggehfUcNkdbUuQvaqG2GxK",
                    "2N9LKph9TKtv1WLDfaUJp4D8EKwsyASYnGX",
                    "2MyVXDzGJgATSdkhKHWvStpBoGEZb1fwjha",
                    "2MuKeQzUHhUQWUZgx5AuNWoQ7YWx6vsXxrv",
                ],
            "addresses" :
                [
                    "QRHtkDQdVvNNwrVjEdeCGviCw7Ny3SNNiA",
                    "QYSXC5cNwxCApsQkHaePqL2v3oNQftuzPX",
                    "Qch5wi1hLzy6eWyiCaLq8uZfULKnxc7HnY",
                    "QSrHM18YhGWXmwTMucxTyWdEQd1QxHjMPy",
                    "QNgQY1LXiaTbckSzhGwPbVqYguPvq7FAU5",
                ],
        },
        {
            "coin"      : Bip44Coins.DASH_TESTNET,
            "seed"      : b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4",
            "ex_master" :  "uprv8tXDerPXZ1QsVNjUJWTurs9kA1KGfKUAts74GCkcXtU8GwnH33GDRbNJpEqTvipfCyycARtQJhmdfWf8oKt41X9LL1zeD2pLsWmxEk3VAwd",
            "account" :
                {
                    "ex_pub"  : "upub5EFU65HtV5TeiSHmZZm7FUffBGy8UKeqp7vw43jYbvZPpoVsgU93oac7Wk3u6moKegAEWtGNF8DehrnHtv21XXEMYRUocHqguyjknFHYfgY",
                    "ex_priv" : "uprv91G7gZkzehuMVxDJTYE6tLivdF8e4rvzSu1LFfKw3b2Qx1Aj8vpoFnHdfUZ3hmi9jsvPifmZ24RTN2KhwB8BfMLTVqaBReibyaFFcTP1s9n",
                },
            "chain_ext" :
                {
                    "ex_pub"  : "upub5F7X3ZAt1HsUyFLTFU9vhKeGULy77aDoJFhscvGBV91tm2mzQ5egFGpeP4nGskwERwbU48g14qREqXJ388X8XBiaLm7PWwk3S45Fe3WAvdK",
                    "ex_priv" : "uprv928Ae3dzAvKBkmFz9ScvLBhXvK8ci7Vww2nGpXrZvoUutESqrYLRhUWAXpK5acXh517npKuCpJ7NXaoWnLs1dLB9w3MHe3KNUm7hPENqMzt",
                },
            "addresses" :
                [
                    "8j7NLynPotJD3x4MHGemN36XPSLBKr6cYn",
                    "8rFznqz9Fv7zvxyNLDexvSREW8KcuNUAmR",
                    "8vWZYUPTextvkcYLFDMQE1wyvfH1FLALz4",
                    "8kfkwmWK1ESMt31yxFy34d1Yrwxd8sUL6R",
                    "8gVt8miJ2YPRir1cjuwxgcDs9EM98qVtNJ",
                ],
        },
    ]


#
# Tests
#
class Bip49Tests(unittest.TestCase):
    # Run all tests in test vector using FromSeed for construction
    def test_vector_from_seed(self):
        for test in TEST_VECTOR:
            # Create from seed
            bip_obj_ctx = Bip49.FromSeed(binascii.unhexlify(test["seed"]), test["coin"])
            # Test master key
            self.assertEqual(test["ex_master"], bip_obj_ctx.PrivateKey())

            # Derive account
            bip_obj_ctx = bip_obj_ctx.Purpose().Coin().Account(0)
            # Test account keys
            self.assertEqual(test["account"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["account"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Derive external chain
            bip_obj_ctx = bip_obj_ctx.Change(Bip44Changes.CHAIN_EXT)
            # Test external chain keys
            self.assertEqual(test["chain_ext"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["chain_ext"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Test external chain addresses
            for i in range(len(test["addresses"])):
                self.assertEqual(test["addresses"][i], bip_obj_ctx.AddressIndex(i).Address())

            # Only for Litecoin: test extended keys with alternate versions
            if test["coin"] == Bip44Coins.LITECOIN:
                # Set flag
                LitecoinConf.EX_KEY_ALT = True
                # Create from seed
                bip_obj_ctx = Bip49.FromSeed(binascii.unhexlify(test["seed"]), test["coin"])
                # Test master key
                self.assertEqual(test["ex_master_alt"], bip_obj_ctx.PrivateKey())
                # Derive account
                bip_obj_ctx = bip_obj_ctx.Purpose().Coin().Account(0)
                # Test account keys
                self.assertEqual(test["account"]["ex_pub_alt"] , bip_obj_ctx.PublicKey())
                self.assertEqual(test["account"]["ex_priv_alt"], bip_obj_ctx.PrivateKey())

                # Derive external chain
                bip_obj_ctx = bip_obj_ctx.Change(Bip44Changes.CHAIN_EXT)
                # Test external chain keys
                self.assertEqual(test["chain_ext"]["ex_pub_alt"] , bip_obj_ctx.PublicKey())
                self.assertEqual(test["chain_ext"]["ex_priv_alt"], bip_obj_ctx.PrivateKey())
                # Reset flag
                LitecoinConf.EX_KEY_ALT = False

            # Only for Litecoin and Litecoin test net, test deprecated addresses
            if test["coin"] == Bip44Coins.LITECOIN or test["coin"] == Bip44Coins.LITECOIN_TESTNET:
                # Set flag
                LitecoinConf.P2SH_DEPR_ADDR = True
                # Test addresses (bip_obj_ctx is already the external chain)
                for i in range(len(test["addresses"])):
                    self.assertEqual(test["addresses_depr"][i], bip_obj_ctx.AddressIndex(i).Address())
                # Reset flag
                LitecoinConf.P2SH_DEPR_ADDR = False

    # Run all tests in test vector using FromExtendedKey for construction
    def test_vector_from_exkey(self):
        for test in TEST_VECTOR:
            # Create from master key
            bip_obj_ctx = Bip49.FromExtendedKey(test["ex_master"], test["coin"])
            # Test master key
            self.assertTrue(bip_obj_ctx.IsMasterLevel())
            self.assertEqual(test["ex_master"], bip_obj_ctx.PrivateKey())

            # Create from account key
            bip_obj_ctx = Bip49.FromExtendedKey(test["account"]["ex_priv"], test["coin"])
            # Test account keys
            self.assertTrue(bip_obj_ctx.IsAccountLevel())
            self.assertEqual(test["account"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["account"]["ex_priv"], bip_obj_ctx.PrivateKey())

            # Create from change key
            bip_obj_ctx = Bip49.FromExtendedKey(test["chain_ext"]["ex_priv"], test["coin"])
            # Test external change keys
            self.assertTrue(bip_obj_ctx.IsChangeLevel())
            self.assertEqual(test["chain_ext"]["ex_pub"] , bip_obj_ctx.PublicKey())
            self.assertEqual(test["chain_ext"]["ex_priv"], bip_obj_ctx.PrivateKey())

    # Test wrong coin derivations
    def test_wrong_coins(self):
        seed_bytes = b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4"

        self.assertRaises(ValueError, Bip49.FromSeed, binascii.unhexlify(seed_bytes), Bip44Coins.DOGECOIN)
        self.assertRaises(ValueError, Bip49.FromSeed, binascii.unhexlify(seed_bytes), Bip44Coins.ETHEREUM)

    # Test wrong path derivations
    def test_wrong_derivations(self):
        seed_bytes = b"5eb00bbddcf069084889a8ab9155568165f5c453ccb85e70811aaed6f6da5fc19a5ac40b389cd370d086206dec8aa6c43daea6690f20ad3d8d48b2d2ce9e38e4"

        # Create all the derivations
        bip_obj_mst    = Bip49.FromSeed(binascii.unhexlify(seed_bytes), Bip44Coins.BITCOIN)
        bip_obj_prp    = bip_obj_mst.Purpose()
        bip_obj_coin   = bip_obj_prp.Coin()
        bip_obj_acc    = bip_obj_coin.Account(0)
        bip_obj_change = bip_obj_acc.Change(Bip44Changes.CHAIN_EXT)
        bip_obj_addr   = bip_obj_change.AddressIndex(0)

        # Wrong derivation from master
        self.assertRaises(Bip44DepthError, bip_obj_mst.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_mst.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_mst.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_mst.AddressIndex, 0)
        # Wrong derivation from purpose
        self.assertRaises(Bip44DepthError, bip_obj_prp.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_prp.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_prp.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_prp.AddressIndex, 0)
        # Wrong derivation from coin
        self.assertRaises(Bip44DepthError, bip_obj_coin.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_coin.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_coin.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_coin.AddressIndex, 0)
        # Wrong derivation from account
        self.assertRaises(Bip44DepthError, bip_obj_acc.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_acc.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_acc.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_acc.AddressIndex, 0)
        # Wrong derivation from chain
        self.assertRaises(Bip44DepthError, bip_obj_change.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_change.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_change.Account, 0)
        self.assertRaises(Bip44DepthError, bip_obj_change.Change , Bip44Changes.CHAIN_EXT)
        # Wrong derivation from address index
        self.assertRaises(Bip44DepthError, bip_obj_addr.Purpose)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Coin)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Account     , 0)
        self.assertRaises(Bip44DepthError, bip_obj_addr.Change      , Bip44Changes.CHAIN_EXT)
        self.assertRaises(Bip44DepthError, bip_obj_addr.AddressIndex, 0)


# Run test if executed
if __name__ == "__main__":
    unittest.main()
